1. avvio nuovo progetto laravel (con cartella repo vuota aperta su vs code):
    composer create-project --prefer-dist laravel/laravel:^7.0 .

2. creo il db vuoto con phpmyadmin (laravel_auth)

3. installo nel progetto la laravel/ui (parte frontend) che fornisce lo scaffolding Bootstrap e Vue fornito da Laravel:
    composer require laravel/ui:^2.4

4. installato il pacchetto laravel/ui, installo lo scaffolding frontend usando il comando Artisan ui:
    php artisan ui vue --auth (--auth crea già una struttura per l'autenticazione)

5. installo la node module per compilare gli asset:
    npm install
    npm run dev

6. mi aggancio al db dal .env. Ogni volta che si cambia qualcosa in questo file bisogna pulire la cache di configurazione:
    php artisan config:clear

7. faccio la migration per creare le tabelle a db:
    php artisan migrate

8. lancio il server per lo sviluppo:
    php artisan serve

9. verifico che tutto sia andato a buon fine:
    localhost:8000 -> welcome di laravel + login - register
    se provo a registrarmi vengo reindirizzato su http://localhost:8000/home dove mi compare la dashboard con il messaggio: "You are logged in!"

10. pulisco e organizzo il codice per dividere bene frontoffice da backoffice:

    - creo un controller uguale a quello che mi ha creato laravel al punto 4 (HomeController) ma sotto namespace Admin per separare la parte admin (autenticato) e la parte pubblica:
        php artisan make:controller Admin/HomeController

    - copio tutta la classe di HomeController, la incollo nell'HomeController appena creato (namespace: Admin) e cancello l'originale

    - cancello il costruttore all'interno della classe HomeController in modo da gestire il middleware con le rotte

    - definisco tutte le rotte del backoffice nel web.php:

        // definisco dentro un gruppo tutte le rotte che voglio proteggere con l'autenticazione:

        // tutte le rotte avranno lo stesso middleware ('auth');
        Route::middleware('auth')

            // tutte le rotte avranno lo stesso namespace (i controller saranno dentro la sottocartella 'Admin');
            ->namespace('Admin')

            // i nomi di tutte le rotte inizieranno con 'admin.';
            ->name('admin.')

            // tutte le rotte avranno lo stesso prefisso url '/admin/';
            ->prefix('admin')

            // inserisco tutte le rotte che devono essere protette da autenticazione (backoffice)
            ->group(function () {

                // /home/admin/
                Route::get('/home', 'HomeController@index')->name('home');

            });

    - lancio il comando per verificare le rotte:
        php artisan route:list

    - avendo spostato la uri da /home a /admin/home, devo andare a configurare laravel in modo che reindirizzi alla pagina corretta:

        in app > Providers > RouteServiceProvider.php:

            // modifico la const HOM£ da '/home' a '/admin/home'
            public const HOME = '/admin/home';

    - adesso la dashboard con il messaggio: "You are logged in!" ha come url http://localhost:8000/admin/home

    - in resources > views > welcome.blade modifico il link per far si che reindirizzi alla rotta '/admin/home'

        {{-- cambiando url() in route() possiamo dargli il nome della rotta --}}
        <a href="{{ route('admin.home') }}">Home</a>

    - organizzo parti frontend e parti backend anche a livello di cartelle (views e asset):

        - in resources > views creo le cartelle 'guest' e 'admin'

        - sposto 'home.blade' nella cartella 'admin' e modifico il percorso nell'HomeController ('admin.home')

        - creo un'altra pagina home.blade dentro 'guest' che conterrà l'applicativo in Vue.js che gestirà la parte frontend

        - in web.php definisco una rotta di fallback che reindirizzerà tutte le rotte che non fanno parte del backoffice al file dove Vue.js gestisce il frontoffice:

            // sotto tutte le altre rotte, ne definisco una di fallback che reindirizza tutte le rotte che non fanno parte dal backoffice alla pagina Vue.js che gestirà il frontoffice 
            Route::any('{any?}', function() {
                return view('guest.home');
            })->where('any', '.*');

    - a questo punto bisogna iniziare a creare lo scaffolding di Vue.js per separare javscript e stile frontoffice da backoffice:

        - in resources > sass creo un file 'front.scss';

        - in resources > js creo una cartella 'views' al cui interno definisco il componente 'App.vue';

        - in resources > js creo un file 'front.js':

            // includo la libreria Vue.js
            window.Vue = require('vue');

            // importo il componente principale della nostra applicazione 'App.vue'
            import App from './views/App.vue';

            // renderizzo App all'avvio
            const app = new Vue({
                el: '#app',
                render: h => h(App),
            });

        - in webpack.mix.js aggiungo le direttive per la compilazione di javascript e scss:

            // creo le direttive per compilare scss e js
            mix.js('resources/js/app.js', 'public/js')
                .js('resources/js/front.js', 'public/js')
                .sass('resources/sass/app.scss', 'public/css')
                .sass('resources/sass/front.scss', 'public/css');

        - in resources > views > guest > home.blade linko i file js e css appena creati:

            <link rel="stylesheet" href="{{asset('css/front.css')}}">
            <script src="{{asset('js/front.js')}}"></script>

        - resetto npm run watch (stacco e rilancio)







